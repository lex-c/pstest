#!/usr/bin/env node
var app = require('../server')
var debug = require('debug')('exptemplate:server')
var http = require('http')
var userCtrlr = require('../controllers/users')

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

var server = http.createServer(app)
var io = require('socket.io')(server)
userCtrlr.setUser(io)

// io.on('connection', (socket) => {
//     console.log('connected now')
//     socket.on('upInt', (currPicInt) => {
//         console.log('receiving', socket.handshake.address, currPicInt)
//         var currPicId = currPicInt[0]
//         var currIntNum = parseInt(currPicInt[1])
//         User.exists({ipAdd: socket.handshake.address}, (err, user) => {
//             if (err) return console.log(err)
//             if (!user) User.create({ipAdd: socket.handshake.address, picsRot: [{picId: 'a'}, {picId: 'b'}, {picId: 'c'}, {picId: 'd'}, {picId: 'e'}, {picId: 'f'}]}, (err, user) => {for (let pic of user.picsRot) if (pic.picId === currPicId) pic.set({intNum: currIntNum}); user.save()})
//             if (user) User.findOne({ipAdd: socket.handshake.address}, (err, user) => {for (let pic of user.picsRot) if (pic.picId === currPicId) pic.set({intNum: currIntNum}); user.save()})
//         })
//     })
//     socket.on('disconnect', () => console.log('they left now'))
// })

server.listen(port)
server.on('error', consoleError)
server.on('listening', debugListen)

function normalizePort(val) {
    var port = parseInt(val, 10)
    if (isNaN(port)) return val
    if (val >= 0) return port
    return false 
}

function consoleError(error) {
    if (error.syscall !== 'listen') throw error
    var bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`
    switch (error.code) {
        case 'EACCES': console.error(`${bind} requires elevated privileges`); process.exit(1); break
        case 'EADDRINUSE' : console.error(`${bind} is already in use`); process.exit(1); break
        default: throw error
    }
}

function debugListen() {
    var serverAdd = server.address()
    var bind = typeof serverAdd === 'string' ? `Pipe ${serverAdd}` : `Port ${serverAdd.port}`
    debug(`Listening on ${bind}`)
}