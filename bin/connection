#!/usr/bin/env node
const User = require('../models/user')
const app = require('../server')
const debug = require('debug')('exptemplate:server')
const http = require('http')

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

const server = http.createServer(app)
const io = require('socket.io')(server)

io.on('connection', (socket) => {
    console.log('connected now')
    socket.on('upInt', (personPicInt) => {
        console.log('receiving', socket.handshake.address, personPicInt)
        // let picsIntObj = {picObjId: personPicInt[0], int: personPicInt[1]}
        // User.find({ipAdd: socket.handshake.address}, (err, user) => {
        //         if (err) { User.create({ipAdd: socket.handshake.address, picsInt: picsIntObj})}
        //         else { User.find({'picsInt.picObjId': personPicInt[0]}, (err, userWithPic) => {
        //                     if (err) {user.picsInt.push(picsIntObj)}
        //                     else {user.picsInt.picObjId = personPicInt[1]}
        //                 })}
        //         })
    })
    socket.on('disconnect', () => console.log('they left now'))
})

server.listen(port)
server.on('error', consoleError)
server.on('listening', debugListen)

function normalizePort(val) {
    const port = parseInt(val, 10)
    if (isNaN(port)) return val
    if (val >= 0) return port
    return false 
}

function consoleError(error) {
    if (error.syscall !== 'listen') throw error
    const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`
    switch (error.code) {
        case 'EACCES': console.error(`${bind} requires elevated privileges`); process.exit(1); break
        case 'EADDRINUSE' : console.error(`${bind} is already in use`); process.exit(1); break
        default: throw error
    }
}

function debugListen() {
    const serverAdd = server.address()
    const bind = typeof serverAdd === 'string' ? `Pipe ${serverAdd}` : `Port ${serverAdd.port}`
    debug(`Listening on ${bind}`)
}